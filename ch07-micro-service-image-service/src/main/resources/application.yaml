# Override the port Tomcat listens on
server:
  port: 9072

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# Customize log levels
logging:
  level:
    reactor:
      core: TRACE
      util: TRACE
    org:
      springframework:
        data: TRACE
        cloud: DEBUG
        integration: DEBUG
    io:
      netty: DEBUG
      reactor: DEBUG
    com:
      giocosmiano: DEBUG


# enable actuator endpoints
#endpoints.autoconfig.enabled=true
#endpoints.beans.enabled=true
#endpoints.configprops.enabled=true
#endpoints.env.enabled=true
#endpoints.health.enabled=true
#endpoints.info.enabled=true
#endpoints.metrics.enabled=true
#endpoints.mappings.enabled=true
#endpoints.trace.enabled=true

#
#  We need to express to Spring Cloud Stream that our source and sink need to
#  communicate through the same RabbitMQ exchange. To do so, we need to provide the following settings
#
#  spring.cloud.stream.bindings is configured for both the input and the output channel's destination to be
#  learning-spring-boot. When using RabbitMQ bindings, this is the name of the exchange and Spring
#  Cloud Stream uses topic exchanges by default
#
#  We take advantage of Spring Cloud Streams' support for consumer groups by also setting the group
#  property. This ensures that even if there are multiple stream listeners to a given channel, only one
#  listener will consume any one message. This type of guarantee is required in cloud-native
#  environments when we can expect to run multiple instances
#
spring:
  application:
    name: images
  # To connect IDE to a remotely running application and push code changes over the wire, allowing to automatically make mods and test them immediately
  devtools:
    remote:
      secret: ch07-micro-service-image-service
    restart:
      poll-interval: 4000
  # To connect IDE to a remotely running application and push code changes over the wire, allowing to automatically make mods and test them immediately
  cloud:
    stream:
      bindings:
        input:
          destination: learning-spring-boot
          group: comments
          content-type: application/json
        output:
          destination: learning-spring-boot

# http://localhost:9072/actuator
management:
  endpoints:
# exposing endpoints over http
    web:
      exposure:
        include: "*"
# exposing endpoints over jmx
#    jmx:
#      exposure:
#        include: "*"

