#
#  For a standalone Eureka Server, we have to configure it with a eureka.instance.hostname and a
#  eureka.client.serviceUrl.defaultZone setting. This resolves to http://localhost:8761/eureka , the URI for this
#  standalone version of Eureka. For a multi-node Eureka Server configuration, we would alter this
#  configuration
#
#  Eureka servers are also clients, which means that with multiple instances running, they will send
#  heartbeats to each other, and also registry data. With a standalone instance, we would get bombarded
#  with log messages about failing to reach peers unless we disable the Eureka server from being a client
#  via eureka.client.registerWithEureka=false and eureka.client.fetchRegistry=false
#
server:
  port: 8761

eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

#
#  To run things in a more resilient mode, we could run two instances, each with a different Spring profile
#  ( peer1 and peer2 ) with the following configuration
#
#  spring.profiles, in a YAML file with the triple-dash separators, lets us put multiple profiles in the same
#  application.yml configuration file. To launch an application with a given profile, we merely need to run it
#  with spring.profiles.active=peer1 or SPRING_PROFILES_ACTIVE=peer1. As stated, this configuration file has two
#  profiles, peer1 and peer2
#
#  Assuming we launched two separate copies of our Eureka Server, each on a different port running each
#  profile, they would seek each other out, register as clients to each other, send heartbeats, and
#  synchronize their registry data. It's left as an exercise for the reader to spin up a pair of Eureka Servers.
#
#  Going back to the original configuration file we wrote, we can now run
#  SpringBootEurekaServerApplication. With this service running in the background, we can now embark
#  on converting our previous monolith into a set of micro-services
#
# spring:
#   profiles: peer1
# eureka:
#   instance:
#     hostname: peer1
#   client:
#     serviceUrl:
#       defaultZone: http://peer2/eureka/
# ---
# spring:
#   profiles: peer2
# eureka:
#   instance:
#     hostname: peer2
#   client:
#     serviceUrl:
#       defaultZone: http://peer1/eureka/
#








