// Spring boot and spring cloud compatibility matrix
// https://spring.io/projects/spring-cloud
// https://stackoverflow.com/questions/42659920/is-there-a-compatibility-matrix-of-spring-boot-and-spring-cloud
// https://start.spring.io/actuator/info
// https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Camden-Release-Notes
// https://github.com/spring-cloud/spring-cloud-stream/wiki/Kafka-Client-Compatibility

buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        lombokVersion = '1.18.8'
		springBootVersion = '2.0.0.RELEASE'
		springCloudVersion = 'Finchley.M9'
		springCloudStreamVersion = 'Elmhurst.SR1'
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" 
    }
}

plugins {
	id 'org.springframework.boot' version '2.0.0.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

// Gradle settings for IntelliJ --> `apply plugin: 'idea'`
// https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html
// https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
// https://spring.io/guides/gs/intellij-idea/
//idea {
//	module {
//		contentRoot = file('ch04-testing-with-spring-boot')
//	}
//}

group = 'com.giocosmiano.exploration.chapter08'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

clean {
	println "${projectDir}/out/production/"
	delete "${projectDir}/out/production/"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	all*.exclude group: 'org.springframework', module: 'spring-webmvc'
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
	compile 'org.springframework.boot:spring-boot-starter-webflux'
//	compile 'org.springframework.boot:spring-boot-starter-amqp' // not needed on cloud-stream
	compile 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	compile 'org.springframework.cloud:spring-cloud-stream-reactive'
	compile 'org.synchronoss.cloud:nio-multipart-parser'

//	spring-cloud-starter-netflix-eureka-client is the dependency needed to register our microservice as a Eureka client.
//	It brings in several transitive dependencies, the most important one for this section being Ribbon
	compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

//	spring-cloud-starter-hystrix is the dependency for the circuit-breaker pattern
	compile 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'

//	To make our micro service talk to a Config Server
	compile 'org.springframework.cloud:spring-cloud-starter-config'

	compile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	compile 'org.springframework.boot:spring-boot-starter-actuator'

	compile group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.36.Final', classifier: 'linux-x86_64'
	
	compile 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

//	temporarily disabled to remove noise
//	compile 'org.springframework.boot:spring-boot-devtools'

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'io.projectreactor:reactor-test'
	testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	testCompile 'org.seleniumhq.selenium:selenium-java'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-stream-dependencies:${springCloudStreamVersion}"
	}
}